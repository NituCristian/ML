# -*- coding: utf-8 -*-
"""KNN_Loan_Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CqFWaCP9I2TVQjL32lo3T18yurCSSHsJ
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import torch

loan=pd.read_csv("/content/loan_data_set.csv")

for n,v in loan.items():
    if v.dtype == "object":
        loan[n] = v.factorize()[0]

# Fill missing values with mean column values in the train set
loan.fillna(loan.mean(), inplace=True)

Cols = ['Loan_ID',	'Married', 'Gender',	'Dependents',	'Education',	'Self_Employed',	'ApplicantIncome',	'CoapplicantIncome',	'LoanAmount',	'Loan_Amount_Term',	'Credit_History',	'Property_Area']
X_cols = loan[Cols] # Features
Y_cols = loan.Loan_Status

# Import train_test_split function
from sklearn.model_selection import train_test_split

# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X_cols, Y_cols, test_size=0.25, shuffle = True) # 75% training and 25% test

#Import knearest neighbors Classifier model
from sklearn.neighbors import KNeighborsClassifier

#Create KNN Classifier
knn = KNeighborsClassifier(n_neighbors=5)

#Train the model using the training sets
knn.fit(X_train, y_train)

#Predict the response for test dataset
y_pred = knn.predict(X_test)

from sklearn import metrics
from sklearn.metrics import accuracy_score, recall_score, classification_report

# Model Accuracy: how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
from sklearn.metrics import f1_score
f1 = f1_score(y_test, y_pred)
print('F1 score: %f' % f1)

print(classification_report(y_test, y_pred))

seed = 100
k = 5

from  imblearn.over_sampling import SMOTE

sm = SMOTE(sampling_strategy='auto', k_neighbors=k, random_state=seed)
X_res, y_res = sm.fit_resample(X_train, y_train)

#Import knearest neighbors Classifier model
from sklearn.neighbors import KNeighborsClassifier

#Create KNN Classifier
knn2 = KNeighborsClassifier(n_neighbors=5)

#Train the model using the training sets
knn2.fit(X_res, y_res)

#Predict the response for test dataset
y_pred = knn2.predict(X_test)

from sklearn import metrics
from sklearn.metrics import accuracy_score, recall_score, classification_report

# Model Accuracy: how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
from sklearn.metrics import f1_score
f1 = f1_score(y_test, y_pred)
print('F1 score: %f' % f1)

print(classification_report(y_test, y_pred))



Cols = ['Loan_ID',	'Married',	'Dependents',	'Education',	'Self_Employed',	'ApplicantIncome',	'CoapplicantIncome',	'LoanAmount',	'Loan_Amount_Term',	'Credit_History',	'Property_Area', 'Loan_Status']
X_cols = loan[Cols] # Features
Y_cols = loan.Gender

# Import train_test_split function
from sklearn.model_selection import train_test_split

# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X_cols, Y_cols, test_size=0.25, shuffle = True) # 75% training and 25% test

#Import knearest neighbors Classifier model
from sklearn.neighbors import KNeighborsClassifier

#Create KNN Classifier
knn = KNeighborsClassifier(n_neighbors=5)

#Train the model using the training sets
knn.fit(X_train, y_train)

#Predict the response for test dataset
y_pred = knn.predict(X_test)

from sklearn import metrics
from sklearn.metrics import accuracy_score, recall_score, classification_report

# Model Accuracy: how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
from sklearn.metrics import f1_score
f1 = f1_score(y_test, y_pred, average = 'macro')
print('F1 score: %f' % f1)

print(classification_report(y_test, y_pred))

sm = SMOTE(sampling_strategy='auto', k_neighbors=k, random_state=seed)
X_res, y_res = sm.fit_resample(X_train, y_train)

#Create KNN Classifier
knn2 = KNeighborsClassifier(n_neighbors=5)

#Train the model using the training sets
knn2.fit(X_res, y_res)

#Predict the response for test dataset
y_pred = knn2.predict(X_test)

from sklearn import metrics
from sklearn.metrics import accuracy_score, recall_score, classification_report

# Model Accuracy: how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
from sklearn.metrics import f1_score
f1 = f1_score(y_test, y_pred, average = 'macro')
print('F1 score: %f' % f1)

print(classification_report(y_test, y_pred))

